# Windsurf Rules for Expoプロジェクト

## 開発環境
### Expoセットアップ
- 最新の安定版Expo SDKを使用
- Expoのファイル構造規約に従う
- expo-cliは最新の安定版を維持

### パッケージ管理
- 新規パッケージインストール前にpackage.jsonの依存関係を確認
- ロックファイル（package-lock.json/yarn.lock）は必ずコミット
- パッケージバージョン更新は慎重に実施

## コーディングスタイル
### TypeScript/React
- 型安全性のためTypeScriptを使用
- React/React Nativeのベストプラクティスに従う
- コンポーネント構造の一貫性を保持
- フック付き関数ンポーネントを使用

### ファイル構成
- 関連コンポーネントはフォルダでグループ化
- 意味のあるファイル名とコンポーネント名を使用
- コンポーネントはモジュール化して再利用可能に
- 適切なインポート/エクスポートパターンに従う

## Gitワークフロー
### コミット
- プロンプトで「コミット」と記述したら機能毎にコミットを作成
- 「コミット」と指示があった場合、その時点で変更があったファイルに関しては全てコミットを実施
- 機能単位でコミットを作成
- コミット前に適切にファイルをステージング
- ステージング時、パスに "(" を含む場合はエスケープ処理
- コミットメッセージは以下の形式で記述:
  - feat: 新機能
  - fix: バグ修正
  - docs: ドキュメント変更
  - style: コードスタイル変更
  - refactor: リファクタリング
  - test: テスト追加
  - chore: メンテナンス作業
- terminal操作前に一度確認
- 「ok」と許可を出したらterminal操作をして、実際にコミットを実行
- リモートへのpushは作業者が確認の上で実施

### ブランチ管理
- 開発はフィーチャーブランチで実施
- main/masterブランチは安定版を維持
- マージ前にコードレビュー実施
- マージ後は不要ブランチを削除

## テスト
- 新機能にはテストを作成
- コミット前にテスト実行
- テストカバレッジを維持

## パフォーマンス
- 画像アセットの最適化
- バンドルサイズの最小化
- Expoパフォーマンスガイドラインに従う
- 定期的なパフォーマンス監査

## ドキュメント
- 新機能のドキュメント化
- READMEの更新維持
- 複雑なロジックにはコメント追加
- 変更履歴の維持

## セキュリティ
- Expoセキュリティベストプラクティスに従う
- 依存関係を最新に保つ
- 機密情報のコミット禁止
- 環境変数を使用して機密情報を管理